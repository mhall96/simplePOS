{"ast":null,"code":"// Register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\nvar isLocalhost = function () {\n  return Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n};\n\nexport function register(swUrl, hooks) {\n  if (hooks === void 0) hooks = {};\n  var registrationOptions = hooks.registrationOptions;\n  if (registrationOptions === void 0) registrationOptions = {};\n  delete hooks.registrationOptions;\n\n  var emit = function (hook) {\n    var args = [],\n        len = arguments.length - 1;\n\n    while (len-- > 0) args[len] = arguments[len + 1];\n\n    if (hooks && hooks[hook]) {\n      hooks[hook].apply(hooks, args);\n    }\n  };\n\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n      if (isLocalhost()) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, emit, registrationOptions);\n        navigator.serviceWorker.ready.then(function (registration) {\n          emit('ready', registration);\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, emit, registrationOptions);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, emit, registrationOptions) {\n  navigator.serviceWorker.register(swUrl, registrationOptions).then(function (registration) {\n    emit('registered', registration);\n\n    if (registration.waiting) {\n      emit('updated', registration);\n      return;\n    }\n\n    registration.onupdatefound = function () {\n      emit('updatefound', registration);\n      var installingWorker = registration.installing;\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            emit('updated', registration);\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            emit('cached', registration);\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    emit('error', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, emit, registrationOptions) {\n  // Check if the service worker can be found.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404) {\n      // No service worker found.\n      emit('error', new Error(\"Service worker not found at \" + swUrl));\n      unregister();\n    } else if (response.headers.get('content-type').indexOf('javascript') === -1) {\n      emit('error', new Error(\"Expected \" + swUrl + \" to have javascript content-type, \" + \"but received \" + response.headers.get('content-type')));\n      unregister();\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, emit, registrationOptions);\n    }\n  }).catch(function (error) {\n    if (!navigator.onLine) {\n      emit('offline');\n    } else {\n      emit('error', error);\n    }\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/victoria/Documents/Project/simplePOS/frontend/node_modules/register-service-worker/index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","swUrl","hooks","registrationOptions","emit","hook","args","len","arguments","length","apply","navigator","addEventListener","checkValidServiceWorker","serviceWorker","ready","then","registration","registerValidSW","waiting","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","Error","unregister","headers","get","indexOf","onLine"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AAEA,IAAIA,WAAW,GAAG,YAAY;AAAE,SAAOC,OAAO,CAC5CC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,WAA7B,IACE;AACAF,EAAAA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,OAF/B,IAGE;AACAF,EAAAA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CACE,wDADF,CAL0C,CAAd;AAQ5B,CARJ;;AAUA,OAAO,SAASC,QAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiC;AACtC,MAAKA,KAAK,KAAK,KAAK,CAApB,EAAwBA,KAAK,GAAG,EAAR;AAExB,MAAIC,mBAAmB,GAAGD,KAAK,CAACC,mBAAhC;AAAqD,MAAKA,mBAAmB,KAAK,KAAK,CAAlC,EAAsCA,mBAAmB,GAAG,EAAtB;AAC3F,SAAOD,KAAK,CAACC,mBAAb;;AAEA,MAAIC,IAAI,GAAG,UAAUC,IAAV,EAAgB;AACzB,QAAIC,IAAI,GAAG,EAAX;AAAA,QAAeC,GAAG,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAxC;;AACA,WAAQF,GAAG,KAAK,CAAhB,EAAoBD,IAAI,CAAEC,GAAF,CAAJ,GAAcC,SAAS,CAAED,GAAG,GAAG,CAAR,CAAvB;;AAEpB,QAAIL,KAAK,IAAIA,KAAK,CAACG,IAAD,CAAlB,EAA0B;AACxBH,MAAAA,KAAK,CAACG,IAAD,CAAL,CAAYK,KAAZ,CAAkBR,KAAlB,EAAyBI,IAAzB;AACD;AACF,GAPD;;AASA,MAAI,mBAAmBK,SAAvB,EAAkC;AAChCf,IAAAA,MAAM,CAACgB,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C,UAAIlB,WAAW,EAAf,EAAmB;AACjB;AACAmB,QAAAA,uBAAuB,CAACZ,KAAD,EAAQG,IAAR,EAAcD,mBAAd,CAAvB;AACAQ,QAAAA,SAAS,CAACG,aAAV,CAAwBC,KAAxB,CAA8BC,IAA9B,CAAmC,UAAUC,YAAV,EAAwB;AACzDb,UAAAA,IAAI,CAAC,OAAD,EAAUa,YAAV,CAAJ;AACD,SAFD;AAGD,OAND,MAMO;AACL;AACAC,QAAAA,eAAe,CAACjB,KAAD,EAAQG,IAAR,EAAcD,mBAAd,CAAf;AACD;AACF,KAXD;AAYD;AACF;;AAED,SAASe,eAAT,CAA0BjB,KAA1B,EAAiCG,IAAjC,EAAuCD,mBAAvC,EAA4D;AAC1DQ,EAAAA,SAAS,CAACG,aAAV,CACGd,QADH,CACYC,KADZ,EACmBE,mBADnB,EAEGa,IAFH,CAEQ,UAAUC,YAAV,EAAwB;AAC5Bb,IAAAA,IAAI,CAAC,YAAD,EAAea,YAAf,CAAJ;;AACA,QAAIA,YAAY,CAACE,OAAjB,EAA0B;AACxBf,MAAAA,IAAI,CAAC,SAAD,EAAYa,YAAZ,CAAJ;AACA;AACD;;AACDA,IAAAA,YAAY,CAACG,aAAb,GAA6B,YAAY;AACvChB,MAAAA,IAAI,CAAC,aAAD,EAAgBa,YAAhB,CAAJ;AACA,UAAII,gBAAgB,GAAGJ,YAAY,CAACK,UAApC;;AACAD,MAAAA,gBAAgB,CAACE,aAAjB,GAAiC,YAAY;AAC3C,YAAIF,gBAAgB,CAACG,KAAjB,KAA2B,WAA/B,EAA4C;AAC1C,cAAIb,SAAS,CAACG,aAAV,CAAwBW,UAA5B,EAAwC;AACtC;AACA;AACA;AACA;AACArB,YAAAA,IAAI,CAAC,SAAD,EAAYa,YAAZ,CAAJ;AACD,WAND,MAMO;AACL;AACA;AACA;AACAb,YAAAA,IAAI,CAAC,QAAD,EAAWa,YAAX,CAAJ;AACD;AACF;AACF,OAfD;AAgBD,KAnBD;AAoBD,GA5BH,EA6BGS,KA7BH,CA6BS,UAAUC,KAAV,EAAiB;AACtBvB,IAAAA,IAAI,CAAC,OAAD,EAAUuB,KAAV,CAAJ;AACD,GA/BH;AAgCD;;AAED,SAASd,uBAAT,CAAkCZ,KAAlC,EAAyCG,IAAzC,EAA+CD,mBAA/C,EAAoE;AAClE;AACAyB,EAAAA,KAAK,CAAC3B,KAAD,CAAL,CACGe,IADH,CACQ,UAAUa,QAAV,EAAoB;AACxB;AACA,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACA1B,MAAAA,IAAI,CAAC,OAAD,EAAU,IAAI2B,KAAJ,CAAW,iCAAiC9B,KAA5C,CAAV,CAAJ;AACA+B,MAAAA,UAAU;AACX,KAJD,MAIO,IAAIH,QAAQ,CAACI,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,EAAqCC,OAArC,CAA6C,YAA7C,MAA+D,CAAC,CAApE,EAAuE;AAC5E/B,MAAAA,IAAI,CAAC,OAAD,EAAU,IAAI2B,KAAJ,CACZ,cAAc9B,KAAd,GAAsB,oCAAtB,GACA,eADA,GACmB4B,QAAQ,CAACI,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAFP,CAAV,CAAJ;AAGAF,MAAAA,UAAU;AACX,KALM,MAKA;AACL;AACAd,MAAAA,eAAe,CAACjB,KAAD,EAAQG,IAAR,EAAcD,mBAAd,CAAf;AACD;AACF,GAhBH,EAiBGuB,KAjBH,CAiBS,UAAUC,KAAV,EAAiB;AACtB,QAAI,CAAChB,SAAS,CAACyB,MAAf,EAAuB;AACrBhC,MAAAA,IAAI,CAAC,SAAD,CAAJ;AACD,KAFD,MAEO;AACLA,MAAAA,IAAI,CAAC,OAAD,EAAUuB,KAAV,CAAJ;AACD;AACF,GAvBH;AAwBD;;AAED,OAAO,SAASK,UAAT,GAAuB;AAC5B,MAAI,mBAAmBrB,SAAvB,EAAkC;AAChCA,IAAAA,SAAS,CAACG,aAAV,CAAwBC,KAAxB,CAA8BC,IAA9B,CAAmC,UAAUC,YAAV,EAAwB;AACzDA,MAAAA,YAAY,CAACe,UAAb;AACD,KAFD;AAGD;AACF","sourcesContent":["// Register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\nvar isLocalhost = function () { return Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n); }\n\nexport function register (swUrl, hooks) {\n  if ( hooks === void 0 ) hooks = {};\n\n  var registrationOptions = hooks.registrationOptions; if ( registrationOptions === void 0 ) registrationOptions = {};\n  delete hooks.registrationOptions\n\n  var emit = function (hook) {\n    var args = [], len = arguments.length - 1;\n    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n    if (hooks && hooks[hook]) {\n      hooks[hook].apply(hooks, args)\n    }\n  }\n\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n      if (isLocalhost()) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, emit, registrationOptions)\n        navigator.serviceWorker.ready.then(function (registration) {\n          emit('ready', registration)\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, emit, registrationOptions)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, emit, registrationOptions) {\n  navigator.serviceWorker\n    .register(swUrl, registrationOptions)\n    .then(function (registration) {\n      emit('registered', registration)\n      if (registration.waiting) {\n        emit('updated', registration)\n        return\n      }\n      registration.onupdatefound = function () {\n        emit('updatefound', registration)\n        var installingWorker = registration.installing\n        installingWorker.onstatechange = function () {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              emit('updated', registration)\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              emit('cached', registration)\n            }\n          }\n        }\n      }\n    })\n    .catch(function (error) {\n      emit('error', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, emit, registrationOptions) {\n  // Check if the service worker can be found.\n  fetch(swUrl)\n    .then(function (response) {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404) {\n        // No service worker found.\n        emit('error', new Error((\"Service worker not found at \" + swUrl)))\n        unregister()\n      } else if (response.headers.get('content-type').indexOf('javascript') === -1) {\n        emit('error', new Error(\n          \"Expected \" + swUrl + \" to have javascript content-type, \" +\n          \"but received \" + (response.headers.get('content-type'))))\n        unregister()\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, emit, registrationOptions)\n      }\n    })\n    .catch(function (error) {\n      if (!navigator.onLine) {\n        emit('offline')\n      } else {\n        emit('error', error)\n      }\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister()\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}