{"ast":null,"code":"import auth0 from 'auth0-js';\nimport history from './history';\nexport default class Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: 'www.google.com',\n      clientID: 'test',\n      redirectUri: process.env.NODE_ENV === 'development' ? 'www.google.com' : 'www.google.com',\n      audience: 'www.google.com',\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n\n    this.login = () => {\n      this.auth0.authorize();\n    };\n\n    this.handleAuthentication = () => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          history.replace('/home');\n        } else if (err) {\n          history.replace('/home');\n          console.log(err);\n        }\n      });\n    };\n\n    this.setSession = authResult => {\n      // Set the time that the access token will expire at\n      let expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      localStorage.setItem('access_token', authResult.accessToken);\n      localStorage.setItem('id_token', authResult.idToken);\n      localStorage.setItem('expires_at', expiresAt); // navigate to the home route\n\n      history.replace('/home');\n    };\n\n    this.logout = () => {\n      // Clear access token and ID token from local storage\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at'); // navigate to the home route\n\n      history.replace('/home');\n    };\n\n    this.isAuthenticated = () => {\n      // Check whether the current time is past the\n      // access token's expiry time\n      let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n      return new Date().getTime() < expiresAt;\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/victoria/Documents/Project/simplePOS/frontend/src/auth.js"],"names":["auth0","history","Auth","WebAuth","domain","clientID","redirectUri","process","env","NODE_ENV","audience","responseType","scope","login","authorize","handleAuthentication","parseHash","err","authResult","accessToken","idToken","setSession","replace","console","log","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","logout","removeItem","isAuthenticated","parse","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,OAAOC,OAAP,MAAoB,WAApB;AAEA,eAAe,MAAMC,IAAN,CAAW;AAAA;AAAA,SAEzBF,KAFyB,GAEjB,IAAIA,KAAK,CAACG,OAAV,CAAkB;AACzBC,MAAAA,MAAM,EAAE,gBADiB;AAEzBC,MAAAA,QAAQ,EAAE,MAFe;AAGzBC,MAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyC,gBAAzC,GAA4D,gBAHhD;AAIzBC,MAAAA,QAAQ,EAAE,gBAJe;AAKzBC,MAAAA,YAAY,EAAE,gBALW;AAMzBC,MAAAA,KAAK,EAAE;AANkB,KAAlB,CAFiB;;AAAA,SAWzBC,KAXyB,GAWjB,MAAM;AACb,WAAKb,KAAL,CAAWc,SAAX;AACA,KAbwB;;AAAA,SAgBzBC,oBAhByB,GAgBF,MAAM;AAC5B,WAAKf,KAAL,CAAWgB,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACzC,YAAIA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAvD,EAAgE;AAC/D,eAAKC,UAAL,CAAgBH,UAAhB;AACAjB,UAAAA,OAAO,CAACqB,OAAR,CAAgB,OAAhB;AACA,SAHD,MAGO,IAAIL,GAAJ,EAAS;AACfhB,UAAAA,OAAO,CAACqB,OAAR,CAAgB,OAAhB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACA;AACD,OARD;AASA,KA1BwB;;AAAA,SA6BzBI,UA7ByB,GA6BXH,UAAD,IAAgB;AAC5B;AACA,UAAIO,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBT,UAAU,CAACU,SAAX,GAAuB,IAAxB,GAAgC,IAAIC,IAAJ,GAAWC,OAAX,EAA/C,CAAhB;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCd,UAAU,CAACC,WAAhD;AACAY,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCd,UAAU,CAACE,OAA5C;AACAW,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCP,SAAnC,EAL4B,CAM5B;;AACAxB,MAAAA,OAAO,CAACqB,OAAR,CAAgB,OAAhB;AACA,KArCwB;;AAAA,SAwCzBW,MAxCyB,GAwChB,MAAM;AACd;AACAF,MAAAA,YAAY,CAACG,UAAb,CAAwB,cAAxB;AACAH,MAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACAH,MAAAA,YAAY,CAACG,UAAb,CAAwB,YAAxB,EAJc,CAKd;;AACAjC,MAAAA,OAAO,CAACqB,OAAR,CAAgB,OAAhB;AACA,KA/CwB;;AAAA,SAkDzBa,eAlDyB,GAkDP,MAAM;AACvB;AACA;AACA,UAAIV,SAAS,GAAGC,IAAI,CAACU,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqB,YAArB,CAAX,CAAhB;AACA,aAAO,IAAIR,IAAJ,GAAWC,OAAX,KAAuBL,SAA9B;AACA,KAvDwB;AAAA;;AAAA","sourcesContent":["import auth0 from 'auth0-js';\r\n\r\nimport history from './history';\r\n\r\nexport default class Auth {\r\n\t// Please use your own credentials here\r\n\tauth0 = new auth0.WebAuth({\r\n\t\tdomain: 'www.google.com',\r\n\t\tclientID: 'test',\r\n\t\tredirectUri: process.env.NODE_ENV === 'development' ? 'www.google.com' : 'www.google.com',\r\n\t\taudience: 'www.google.com',\r\n\t\tresponseType: 'token id_token',\r\n\t\tscope: 'openid'\r\n\t});\r\n\r\n\tlogin = () => {\r\n\t\tthis.auth0.authorize();\r\n\t}\r\n\r\n\t// parses the result after authentication from URL hash\r\n\thandleAuthentication = () => {\r\n\t\tthis.auth0.parseHash((err, authResult) => {\r\n\t\t\tif (authResult && authResult.accessToken && authResult.idToken) {\r\n\t\t\t\tthis.setSession(authResult);\r\n\t\t\t\thistory.replace('/home');\r\n\t\t\t} else if (err) {\r\n\t\t\t\thistory.replace('/home');\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Sets user details in localStorage\r\n\tsetSession = (authResult) => {\r\n\t\t// Set the time that the access token will expire at\r\n\t\tlet expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\r\n\t\tlocalStorage.setItem('access_token', authResult.accessToken);\r\n\t\tlocalStorage.setItem('id_token', authResult.idToken);\r\n\t\tlocalStorage.setItem('expires_at', expiresAt);\r\n\t\t// navigate to the home route\r\n\t\thistory.replace('/home');\r\n\t}\r\n\r\n\t// removes user details from localStorage\r\n\tlogout = () => {\r\n\t\t// Clear access token and ID token from local storage\r\n\t\tlocalStorage.removeItem('access_token');\r\n\t\tlocalStorage.removeItem('id_token');\r\n\t\tlocalStorage.removeItem('expires_at');\r\n\t\t// navigate to the home route\r\n\t\thistory.replace('/home');\r\n\t}\r\n\r\n\t// checks if the user is authenticated\r\n\tisAuthenticated = () => {\r\n\t\t// Check whether the current time is past the\r\n\t\t// access token's expiry time\r\n\t\tlet expiresAt = JSON.parse(localStorage.getItem('expires_at'));\r\n\t\treturn new Date().getTime() < expiresAt;\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}